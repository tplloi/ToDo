Index: app/src/main/java/com/loitp/activity/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.loitp.activity\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport com.annotation.LogTag\r\nimport com.core.base.BaseApplication\r\nimport com.core.base.BaseFontActivity\r\nimport com.core.utilities.*\r\nimport com.karumi.dexter.Dexter\r\nimport com.karumi.dexter.MultiplePermissionsReport\r\nimport com.karumi.dexter.PermissionToken\r\nimport com.karumi.dexter.listener.PermissionRequest\r\nimport com.karumi.dexter.listener.multi.MultiplePermissionsListener\r\nimport com.loitp.BuildConfig\r\nimport com.loitp.R\r\nimport com.model.GG\r\nimport kotlinx.android.synthetic.main.activity_splash.*\r\nimport okhttp3.Call\r\n\r\n@LogTag(\"SplashActivity\")\r\nclass SplashActivity : BaseFontActivity() {\r\n    private var isAnimDone = false\r\n    private var isCheckReadyDone = false\r\n    private var isShowDialogCheck = false\r\n\r\n    override fun setLayoutResourceId(): Int {\r\n        return R.layout.activity_splash\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        LUIUtil.setDelay(mls = 1500, runnable = Runnable {\r\n            isAnimDone = true\r\n            goToHome()\r\n        })\r\n        textViewVersion.text = \"Version ${BuildConfig.VERSION_NAME}\"\r\n        tvPolicy.setOnClickListener {\r\n            LSocialUtil.openBrowserPolicy(context = this)\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (!isShowDialogCheck) {\r\n            checkPermission()\r\n        }\r\n    }\r\n\r\n    private fun checkPermission() {\r\n        isShowDialogCheck = true\r\n        Dexter.withContext(this)\r\n                .withPermissions(\r\n                        Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.ACCESS_FINE_LOCATION\r\n                )\r\n                .withListener(object : MultiplePermissionsListener {\r\n                    override fun onPermissionsChecked(report: MultiplePermissionsReport) {\r\n                        // check if all permissions are granted\r\n                        if (report.areAllPermissionsGranted()) {\r\n                            checkReady()\r\n                        } else {\r\n                            showShouldAcceptPermission()\r\n                        }\r\n\r\n                        // check for permanent denial of any permission\r\n                        if (report.isAnyPermissionPermanentlyDenied) {\r\n                            showSettingsDialog()\r\n                        }\r\n                        isShowDialogCheck = true\r\n                    }\r\n\r\n                    override fun onPermissionRationaleShouldBeShown(\r\n                            permissions: List<PermissionRequest>,\r\n                            token: PermissionToken\r\n                    ) {\r\n                        token.continuePermissionRequest()\r\n                    }\r\n                })\r\n                .onSameThread()\r\n                .check()\r\n    }\r\n\r\n    private fun goToHome() {\r\n        if (isAnimDone && isCheckReadyDone) {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n            LActivityUtil.tranIn(this)\r\n            this.finishAfterTransition()\r\n        }\r\n    }\r\n\r\n    private fun showSettingsDialog() {\r\n        val alertDialog = LDialogUtil.showDialog2(\r\n                context = this,\r\n                title = getString(R.string.need_permisson),\r\n                msg = getString(R.string.need_permisson_to_use_app),\r\n                button1 = getString(R.string.setting),\r\n                button2 = getString(R.string.deny),\r\n                onClickButton1 = {\r\n                    isShowDialogCheck = false\r\n                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)\r\n                    val uri = Uri.fromParts(\"package\", packageName, null)\r\n                    intent.data = uri\r\n                    startActivityForResult(intent, 101)\r\n                },\r\n                onClickButton2 = {\r\n                    onBackPressed()\r\n                })\r\n        alertDialog.setCancelable(false)\r\n    }\r\n\r\n    private fun showShouldAcceptPermission() {\r\n        val alertDialog = LDialogUtil.showDialog2(\r\n                context = this,\r\n                title = getString(R.string.need_permisson),\r\n                msg = getString(R.string.need_permisson_to_use_app),\r\n                button1 = getString(R.string.yes),\r\n                button2 = getString(R.string.deny),\r\n                onClickButton1 = {\r\n                    checkPermission()\r\n                },\r\n                onClickButton2 = {\r\n                    onBackPressed()\r\n                })\r\n        alertDialog.setCancelable(false)\r\n    }\r\n\r\n    private fun showDialogNotReady() {\r\n        runOnUiThread {\r\n            val title = if (LConnectivityUtil.isConnected()) {\r\n                getString(R.string.app_is_not_ready)\r\n            } else {\r\n                getString(R.string.check_ur_connection)\r\n            }\r\n            val alertDial = LDialogUtil.showDialog2(context = this,\r\n                    title = getString(R.string.warning),\r\n                    msg = title,\r\n                    button1 = getString(R.string.exit),\r\n                    button2 = getString(R.string.try_again),\r\n                    onClickButton1 = {\r\n                        onBackPressed()\r\n                    },\r\n                    onClickButton2 = {\r\n                        checkReady()\r\n                    }\r\n            )\r\n            alertDial.setCancelable(false)\r\n        }\r\n    }\r\n\r\n    private fun checkReady() {\r\n\r\n        fun setReady() {\r\n            runOnUiThread {\r\n                isCheckReadyDone = true\r\n                goToHome()\r\n            }\r\n        }\r\n\r\n        if (LPrefUtil.getCheckAppReady()) {\r\n            setReady()\r\n            return\r\n        }\r\n        val linkGGDriveCheckReady = getString(R.string.link_gg_drive)\r\n        LStoreUtil.getTextFromGGDrive(\r\n                linkGGDrive = linkGGDriveCheckReady,\r\n                onGGFailure = { _: Call, e: Exception ->\r\n                    e.printStackTrace()\r\n                    showDialogNotReady()\r\n                },\r\n                onGGResponse = { listGG: ArrayList<GG> ->\r\n                    logD(\"getGG listGG: -> \" + BaseApplication.gson.toJson(listGG))\r\n\r\n                    fun isReady(): Boolean {\r\n                        listGG.forEach { gg ->\r\n                            if (packageName == gg.pkg) {\r\n                                return gg.isReady\r\n                            }\r\n                        }\r\n                        return false\r\n                    }\r\n\r\n                    val isReady = true // return true for demo\r\n                    if (isReady) {\r\n                        LPrefUtil.setCheckAppReady(value = true)\r\n                        setReady()\r\n                    } else {\r\n                        showDialogNotReady()\r\n                    }\r\n                }\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/loitp/activity/SplashActivity.kt	(revision 0e579c01e119e745d175ca41d47c3cff5dd5071f)
+++ app/src/main/java/com/loitp/activity/SplashActivity.kt	(date 1607532856758)
@@ -173,6 +173,7 @@
                 onGGFailure = { _: Call, e: Exception ->
                     e.printStackTrace()
                     showDialogNotReady()
+                    LUI
                 },
                 onGGResponse = { listGG: ArrayList<GG> ->
                     logD("getGG listGG: -> " + BaseApplication.gson.toJson(listGG))
